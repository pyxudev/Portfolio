#coding: UTF-8
import glob
import csv
import os

year_list = ["2017","2018","2019","2020", "2021"]
month_list = ["01","02","03","04","05","06","07","08","09","10","11","12"]
ken_list = ["愛知", "愛媛", "茨城", "岡山", "沖縄", "岩手", "岐阜", "宮崎", "宮城", "京都", "熊本", "群馬", "警視庁", "広島", "香川", "高知", "佐賀", "埼玉","三重", "山形", "山口", "山梨", "滋賀", "鹿児島", "秋田", "新潟", "神奈川", "青森", "静岡", "石川", "千葉", "大阪", "大分", "長崎", "長野", "鳥取", "島根", "徳島", "栃木", "奈良", "富山", "福井", "福岡", "福島", "兵庫", "旭川", "釧路", "札幌","函館", "北見", "和歌山"]
header_row = ["情報源コード", "計測地点番号", "計測地点名", "2次メッシュコード", "交通管理リンク番号", "経度", "緯度", "時刻", "断面交通量", "摘要", "最寄り幹線道路平行1_情報源コード", "最寄り幹線道路平行1_計測地点番号", "最寄り幹線道路平行1_計測地点名", "最寄り幹線道路平行1_2次メッシュコード", "最寄り幹線道路平行1_交通管理リンク番号", "最寄り幹線道路平行1_緯度", "最寄り幹線道路平行1_経度", "最寄り幹線道路平行1_接続タイプ", "最寄り幹線道路平行1_車線数", "最寄り幹線道路平行1_断面交通量", "最寄り幹線道路平行1_市区町村道との距離", "最寄り幹線道路平行1_摘要", "最寄り幹線道路平行2_情報源コード", "最寄り幹線道路平行2_計測地点番号", "最寄り幹線道路平行2_計測地点名", "最寄り幹線道路平行2_2次メッシュコード", "最寄り幹線道路平行2_交通管理リンク番号", "最寄り幹線道路平行2_緯度", "最寄り幹線道路平行2_経度","最寄り幹線道路平行2_接続タイプ", "最寄り幹線道路平行2_車線数", "最寄り幹線道路平行2_断面交通量", "最寄り幹線道路平行2_市区町村道との距離", "最寄り幹線道路平行2_摘要", "最寄り幹線道路直行1_情報源コード", "最寄り幹線道路直行1_計測地点番号", "最寄り幹線道路直行1_計測地点名", "最寄り幹線道路直行1_2次メッシュコード", "最寄り幹線道路直行1_交通管理リンク番号", "最寄り幹線道路直行1_緯度", "最寄り幹線道路直行1_経度","最寄り幹線道路直行1_接続タイプ", "最寄り幹線道路直行1_車線数", "最寄り幹線道路直行1_断面交通量", "最寄り幹線道路直行1_市区町村道との距離", "最寄り幹線道路直行1_摘要", "最寄り幹線道路直行2_情報源コード", "最寄り幹線道路直行2_計測地点番号", "最寄り幹線道路直行2_計測地点名", "最寄り幹線道路直行2_2次メッシュコード", "最寄り幹線道路直行2_交通管理リンク番号", "最寄り幹線道路直行2_緯度", "最寄り幹線道路直行2_経度","最寄り幹線道路直行2_接続タイプ", "最寄り幹線道路直行2_車線数", "最寄り幹線道路直行2_断面交通量", "最寄り幹線道路直行2_市区町村道との距離", "最寄り幹線道路直行2_摘要"]

if os.path.isdir(f"./sort/sorted/"):
	pass
else:
	os.mkdir(f"./sort/sorted/")
	
for ken in ken_list:
	if os.path.isdir(f"./sort/{ken}/"):
		for year in year_list:
			for month in month_list:
				tg_csv = f"./sort/{ken}/{ken}_{year}{month}.csv.csv"
				
				if os.path.exists(tg_csv):
					if os.path.isdir(f"./sort/sorted/{ken}/"):
						pass
					else:
						os.mkdir(f"./sort/sorted/{ken}/")

					sorted_csv = "./sort/sorted" + tg_csv[6:-4]
					if os.path.exists(sorted_csv):
						pass
					else:
						origin_csv = open(tg_csv, 'r')
						reader = csv.reader(origin_csv)
						next(reader)
						out = sorted(reader, key = lambda x: (x[1], x[7]))

						new_csvfile = open(sorted_csv, 'w', newline="")
						writer = csv.writer(new_csvfile)
						writer.writerow(header_row)
						writer.writerows(out)
						new_csvfile.close()
				else:
					print(tg_csv[10:-4])

print("done")